/*
  ==============================================================================

    This file was auto-generated by the Jucer!

    It contains the basic startup code for a Juce application.

  ==============================================================================
*/

#ifndef __PLUGINPROCESSOR_H_526ED7A9__
#define __PLUGINPROCESSOR_H_526ED7A9__

#define THUMBNAIL_WIDTH 720
#define NUM_ROWS 8
#define NUM_COLS 8

#include "../JuceLibraryCode/JuceHeader.h"
#include "AudioSample.h"
#include "OSCHandler.h"
#include "PatternRecording.h"
#include "SampleStrip.h"
#include "Array2D.h"
#include "MappingEngine.h"
#include "GlobalSettings.h"

class GlobalSettings;

//==============================================================================
class mlrVSTAudioProcessor : public AudioProcessor,
                             public ChangeBroadcaster,
                             public Timer
{
public:
    //==============================================================================
    mlrVSTAudioProcessor();
    ~mlrVSTAudioProcessor();

    //==============================================================================
    void prepareToPlay (double sampleRate, int samplesPerBlock);
    void releaseResources();
    void processBlock (AudioSampleBuffer& buffer, MidiBuffer& midiMessages);
    void reset();

    //==============================================================================
    bool hasEditor() const                  { return true; }
    AudioProcessorEditor* createEditor();

    //==============================================================================
    const String getName() const            { return JucePlugin_Name; }

    int getNumParameters() { return totalNumParams; }
    float getParameter (int /*index*/) { return 0.0f; }
    void setParameter (int /*index*/, float /*newValue*/) { }
    const String getParameterName (int /*index*/) { return String::empty; }
    const String getParameterText (int /*index*/) { return String::empty; }

    const String getInputChannelName (int channelIndex) const;
    const String getOutputChannelName (int channelIndex) const;
    bool isInputChannelStereoPair (int index) const;
    bool isOutputChannelStereoPair (int index) const;

    bool acceptsMidi() const;
    bool producesMidi() const;

	bool silenceInProducesSilenceOut() const;
	double getTailLengthSeconds() const;

    //==============================================================================
    int getNumPrograms()                                                { return 0; }
    int getCurrentProgram()                                             { return 0; }
    void setCurrentProgram (int /*index*/)                              { }
    const String getProgramName (int /*index*/)                         { return String::empty; }
    void changeProgramName (int /*index*/, const String& /*newName*/)   { }

    //==============================================================================
    void getStateInformation (MemoryBlock& destData);
    void setStateInformation (const void* data, int sizeInBytes);


    // this keeps a copy of the last set of time info that was acquired during an audio
    // callback - the UI component will read this and display it.
    AudioPlayHead::CurrentPositionInfo lastPosInfo;

    void timerCallback();

    // If we were to have any VST parameters, they would be listed here
    // however all mapping is self-contained so totalNumParams = 0
    enum Parameters { totalNumParams };


    enum SamplePool
    {
        mNoMapping,
        pSamplePool,
        pResamplePool,
        pRecordPool
    };

    // Mapping stuff ////////////////////
    int getMonomeMapping(const int &mappingType, const int &col) const
    {
        return mappingEngine.getMonomeMapping(mappingType, col);
    }
    void setMonomeMapping(const int &mappingType, const int &col, const int &newMapping)
    {
        mappingEngine.setMonomeMapping(mappingType, col, newMapping);
    }
    String getMappingName(const int &mappingType, const int &mappingID)
    {
        return mappingEngine.getMappingName(mappingType, mappingID);
    }
    int getModifierBtnState() const { return currentStripModifier; }




    // adds a sample to the sample pool
    int addNewSample(File &sampleFile);
    AudioSample * getAudioSample(const int &samplePoolIndex, const int &poolID);
    int getSamplePoolSize(const int &index) const
    {
        switch (index)
        {
        case pSamplePool : return samplePool.size();
        case pResamplePool : return 8;      // TODO: make this a variable
        case pRecordPool : return 8;
        default : jassertfalse; return -1;
        }

    }


    // TODO: bounds checking?
    String getSampleName(const int &index, const int &poolID) const
    {
        switch (poolID)
        {
        case pSamplePool:
            jassert(index < samplePool.size());
            return samplePool[index]->getSampleName();
        case pResamplePool :
            jassert(index < resamplePool.size());
            return resamplePool[index]->getSampleName();
        default :
            jassertfalse; return "error: pool not found";
        }
    }

    // Returns a pointer to the sample in the sample pool at the specified index
    AudioSample* getSample(const int &index)
    {
        jassert(index < samplePool.size());
        return samplePool[index];
    }

    AudioSample* getLatestSample() { return samplePool.getLast(); }

    const double calcInitialPlaySpeed(const int &stripID, const bool &applyChange = true);
    void calcPlaySpeedForNewBPM(const int &stripID);
    void calcPlaySpeedForSelectionChange(const int &stripID);
    void modPlaySpeed(const double &factor, const int &stripID);
    void switchChannels(const int &newChan, const int &stripID);
    void stopAllStrips(const int &stopMode);

    void processOSCKeyPress(const int &monomeCol, const int &monomeRow, const bool &state);
    void setOSCPrefix(const String &newPrefix){ oscMsgHandler.setPrefix(newPrefix); }

    // set up the channels (can be used to change number of channels
    void buildChannelArray();
    void buildSampleStripArray(const int &numSampleStrips);

    SampleStrip* getSampleStrip(const int &index);

    bool getChannelMuteStatus(const int &chan) const
    {
        const bool status = *static_cast<const bool*>(gs.getGlobalSettingArray(GlobalSettings::sChannelMutes, chan));
        return status;
    }
    void setChannelMute(const int &chan, const bool &state)
    {
        gs.setGlobalSettingArray(GlobalSettings::sChannelMutes, chan, &state);
    }
    float getChannelGain(const int &chan) const
    {
        const float gain = *static_cast<const float*>(gs.getGlobalSettingArray(GlobalSettings::sChannelGains, chan));
        return gain;
    }
    void setChannelGain(const int &chan, const float &newGain)
    {
        gs.setGlobalSettingArray(GlobalSettings::sChannelGains, chan, &newGain);
    }
    Colour getChannelColour(const int &chan) const
    {
        jassert(chan < channelColours.size());
        return channelColours[chan];
    }


    void setSampleStripParameter(const int &parameterID, const void *newValue, const int &stripID, const bool sendChangeMsg = true)
    {
        if (stripID < gs.numSampleStrips && stripID >= 0)
            sampleStripArray[stripID]->setSampleStripParam(parameterID, newValue, sendChangeMsg);
    }
    void toggleSampleStripParameter(const int &parameterID, const int &stripID)
    {
        if (stripID < gs.numSampleStrips && stripID >= 0)
            sampleStripArray[stripID]->toggleSampleStripParam(parameterID);
    }
    const void* getSampleStripParameter(const int &parameterID, const int &stripID) const
    {
        if (stripID < gs.numSampleStrips && stripID >= 0)
            return sampleStripArray[stripID]->getSampleStripParam(parameterID);
        else
            return NULL;
    }

    // These are a helper functions so that all classes
    // don't need access to the gs Settings engine
    const void* getGlobalSetting(const int &settingID) const;
    void setGlobalSetting(const int &settingID, const void * newValue, const bool &notifyListeners = true);


    // Preset stuff
    void saveXmlSetlist(const File &setlistFile);
    void loadXmlSetlist(const File &setlistFile);
    void addPreset(const String &presetName);

    // giving a position within the list, try to
    // load that preset / setlist item
    void renamePreset(const String &newName, const int & id);
    void removeSetlistItem(const int &id);
    void removePresetListItem(const int &id);
    void selectSetlistItem(const int &id);
    void selectPresetListItem(const int &id);

    void insetPresetIntoSetlist(const int &presetID, const int &indexToInsertAt);
    // this does the "heavy lifting" of actually loading the preset
    void loadPreset(XmlElement * presetToLoad);

    XmlElement getPresetList() const { return presetList; }
    XmlElement & getPresetListP() { return presetList; }

    XmlElement getSetlist() const { return setlist; }
    XmlElement & getSetlistP() { return setlist; }
    void setSetlist(const XmlElement &newSetlist) { setlist = newSetlist; }

    // Recording / resampling stuff
    void startRecording();
    float getRecordingPrecountPercent() const;
    float getRecordingPercent() const;
    void processRecordingBuffer(AudioSampleBuffer &input, const int &numSamples);
    bool areWeRecording() const { return gs.isRecording; }

    void startResampling();
    float getResamplingPrecountPercent() const;
    float getResamplingPercent() const;
    void processResamplingBuffer(AudioSampleBuffer &input, const int &numSamples);
    bool areWeResampling() const { return gs.isResampling; }

    void startPatternRecording() { patternRecordings[gs.currentPatternBank]->startPatternRecording(); }
    float getPatternPrecountPercent() const { return patternRecordings[gs.currentPatternBank]->getPatternPrecountPercent(); }

	// get the percent done of the currently selected pattern
    float getPatternPercent() const { return patternRecordings[gs.currentPatternBank]->getPatternPercent(); }
	// get percent done of requested pattern
    float getPatternPercent(const int &patternID) const { jassert(patternID < patternRecordings.size()); return patternRecordings[patternID]->getPatternPercent(); }

    bool isPatternRecording() const { return patternRecordings[gs.currentPatternBank]->isPatternRecording; }
    bool isPatternRecording(const int &patternID) const { return patternRecordings[patternID]->isPatternRecording; }

    bool isPatternPlaying() const { return patternRecordings[gs.currentPatternBank]->isPatternPlaying; }
    bool isPatternPlaying(const int &patternID) const { return patternRecordings[patternID]->isPatternPlaying; }

	PatternRecording * getPatternRecording(const int &patternID)
	{
		jassert( patternID < patternRecordings.size() );
		return patternRecordings[patternID];
	}


    // here rate is the level of quantisation, so for 1 / 32th
    // note quantisation, quantisationLevel = 0.03125 etc
    void updateQuantizeSettings()
    {
        if (gs.quantisationLevel < 0.0)
        {
            quantisationOn = false;
            quantisedBuffer.clear();
        }
        else
        {
            quantisationGap = (int) (getSampleRate() * (120.0 * gs.quantisationLevel / gs.currentBPM));
            quantRemaining = quantisationGap;
            quantisationOn = true;
        }
    }

    // this should be called if the BPM changes at all
    void changeBPM()
    {
        updateQuantizeSettings();
        for (int s = 0; s < sampleStripArray.size(); ++s)
            calcPlaySpeedForNewBPM(s);
    }

    // which types of audio files can we load
    const String getWildcardFormats() const { return "*.mp3,*.wav;*.flac;*.ogg;*.aif;*.aiff;*.caf"; }

    // function so that HintOverlays can detect button presses
    const bool isColumnHeld(const int &col)
    {

        // NOTE: start at row 1 as we want to exclude
        // modifiers from this search
        for (int r = 1; r < NUM_ROWS; ++r)
            if (buttonStatus.get(r, col))
                return true;

        return false;
    }

    void setupButtonStatus(const int &newNumRows, const int &newNumCols)
    {
        buttonStatus.setSize(newNumRows, newNumCols, false);
    }

private:

    GlobalSettings gs;

    // MIDI / quantisation //////////////////////////////////////
    // OSC messages from the monome are converted to MIDI messages.
    // quantisationLevel stores the fineness of the quantisation
    // so that 1/4 note quantisation is 0.25 etc. NOTE: any negative
    // values will be interpreted as no quantisation (-1.0 preferred).
    bool quantisationOn;
    int quantisationGap, quantRemaining;

    // quantised notes are stored in one buffer per strip
    MidiBuffer quantisedBuffer;
    // unquantised notes are collected all together
    MidiMessageCollector unquantisedCollector;


    // Sample Pools /////////////////////
    OwnedArray<AudioSample> samplePool;         // for sample files (.wavs etc)
    OwnedArray<AudioSample> resamplePool;       // for recorded internal sounds
    OwnedArray<AudioSample> recordPool;         // for external recordings
    OwnedArray<PatternRecording> patternRecordings;   // for pattern recordings


    // Channel Setup /////////////
    bool isMstrVolInc, isMstrVolDec;    // are we increasing mstr vol (using a mapping)
    Array<Colour> channelColours;       // colours for channels in the GUI


    // Global settings /////////////////////////////////////////////////

    bool isBPMInc, isBPMDec;    // are we currently (in/de)creasing BPM





    // SampleStrips ////////////////
    // These track the seperate SampleStrips (related to the GUI component
    // SampleStripControl). They control the audio for each strip
    OwnedArray<SampleStrip> sampleStripArray;


    // OSC ////////////////////////
    OSCHandler oscMsgHandler;   // Send and receive OSC messages through this

    // Audio Buffers /////////////////
    // this is for summing the contributions from SampleStrips
    AudioSampleBuffer stripContrib;
    // Store resampled information
    AudioSampleBuffer resampleBuffer;
    // Store recorded information
    AudioSampleBuffer recordBuffer;

    // Pattern recorder information
    MidiBuffer patternRecorder;




    // Preset Handling //////////////////////////////////////////

    XmlElement presetList;  // this is a unique list of possible presets (used internally)
    XmlElement setlist;     // this is an ordered list of consisting of a entries from presetList

    // Mapping settings ////////////////////////////////////////
public:
    // this object tracks/handles all mappings (and related
    // functions like returning the mapping name etc).
    MappingEngine mappingEngine;

private:

    // Tells us which of the modifier button is being held
    // so monome row can be used to control SampleStrip parameters
    // (like stop, reverse sample etc.), PatternStrip parameters
    // (like record pattern), Global settings and much more...
    // NOTE: -1 means no strip is held
    int currentStripModifier;

    void executeSampleStripMapping(const int &mappingID, const int &stripID, const bool &state);
    void executePatternStripMapping(const int &mappingID, const int &stripID, const bool &state);
    void executeGlobalMapping(const int &mappingID, const bool &state);


    int recordLengthInSamples, recordPrecountLengthInSamples;
    int recordPosition, recordPrecountPosition;

    int resampleLengthInSamples, resamplePrecountLengthInSamples;   // length in samples
    int resamplePosition, resamplePrecountPosition;     // track resampling progress

    // Misc ////////////////


    Array2D<bool> buttonStatus;

    // Store which LED column is currently being used
    // for displaying playback position.
    Array<int> playbackLEDPosition;



    void setMonomeStatusGrids(const int &width, const int &height);

    JUCE_DECLARE_NON_COPYABLE_WITH_LEAK_DETECTOR (mlrVSTAudioProcessor);
};

#endif  // __PLUGINPROCESSOR_H_526ED7A9__
